import{AppError,Filter,populator,SortSetter}from"adminjs";import{Messages}from"../../constants/messages.js";export const oneToManyHandler=async(a,b,c={},d)=>{const{relation:e,targetResource:f}=b,{sortBy:g,direction:h="asc",filters:i={},perPage:j=d._admin.options.settings?.defaultPerPage||10,page:k=1}=c;if(!e.target.joinKey)throw new AppError(Messages.JoinKeyMissing);i[e.target.joinKey]=a;const l=f.decorate().getListProperties(),m=l.find(a=>a.isSortable());let n;m&&(n=SortSetter({sortBy:g,direction:h},m.name(),f.decorate().options));const o=new Filter(i,f),p={limit:j,offset:(k-1)*j,sort:n},q=await f.find(o,p,d),r=await populator(q,d);d.records=r;const s=await f.count(o,d);return{meta:{total:s,perPage:j,page:k,direction:n?.direction,sortBy:n?.sortBy},records:r.map(a=>a.toJSON(d.currentAdmin)),// Note: Returning owner record as "record" is a workaround so that "record" type action
// doesn't throw an error about "record" being required
record:d.record?.toJSON(d.currentAdmin)}};