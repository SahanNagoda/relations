import{AppError,Filter,populator}from"adminjs";import{Messages}from"../../constants/messages.js";export const manyToManyHandler=async(a,b,c={},d)=>{const{relation:e,targetResource:f}=b,{sortBy:g,direction:h,perPage:i=d._admin.options.settings?.defaultPerPage||10,page:j=1}=c,{junction:k}=e;if(!k)throw new Error(Messages.JunctionMissing);if(!k.throughResourceId)throw new AppError(Messages.JunctionResourceIdMissing);const l=d._admin.findResource(k?.throughResourceId);if(!l)throw new AppError(Messages.JunctionResourceMissing,{junctionResourceId:k.throughResourceId},{options:{junctionResourceId:k.throughResourceId}});const m=new Filter({[k.joinKey]:a},l),n={sortBy:k.inverseJoinKey,direction:"desc"};let o=n;"prisma"===l.databaseName()&&g&&(o={sortBy:`${k.inverseJoinKey}.${g}`,direction:h||"desc"});const p=await l.find(m,{limit:i,offset:(j-1)*i,sort:o},d),q=await l.count(m,d),r=p.map(a=>a.params[k.inverseJoinKey]),s=r.filter(a=>"undefined"!=typeof a&&null!==a),t=await f.findMany(s),u=r.map(a=>t.find(b=>b.id()===a)).filter(Boolean),v=await populator(u,d);// This is to ensure we keep the correct ordering, some DBMS do not guarantee the order will be intact in IN(...) queries
return d.records=v,{meta:{total:q,perPage:i,page:j,sortBy:o.sortBy,direction:h||"desc"},records:v.map(a=>a.toJSON(d.currentAdmin)),// Note: Returning owner record as "record" is a workaround so that "record" type action
// doesn't throw an error about "record" being required
record:d.record?.toJSON(d.currentAdmin)}};